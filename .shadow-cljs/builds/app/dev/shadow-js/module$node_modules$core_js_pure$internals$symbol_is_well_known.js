["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/core-js-pure/internals/symbol-is-well-known.js"],"~:js","shadow$provide.module$node_modules$core_js_pure$internals$symbol_is_well_known=function(global,require,module,exports){var shared=require(\"module$node_modules$core_js_pure$internals$shared\"),getBuiltIn=require(\"module$node_modules$core_js_pure$internals$get_built_in\"),uncurryThis=require(\"module$node_modules$core_js_pure$internals$function_uncurry_this\");global=require(\"module$node_modules$core_js_pure$internals$is_symbol\");require=require(\"module$node_modules$core_js_pure$internals$well_known_symbol\");\nexports=getBuiltIn(\"Symbol\");var $isWellKnownSymbol=exports.isWellKnownSymbol,getOwnPropertyNames=getBuiltIn(\"Object\",\"getOwnPropertyNames\"),thisSymbolValue=uncurryThis(exports.prototype.valueOf),WellKnownSymbolsStore=shared(\"wks\");shared=0;getBuiltIn=getOwnPropertyNames(exports);for(uncurryThis=getBuiltIn.length;shared<uncurryThis;shared++)try{var symbolKey=getBuiltIn[shared];global(exports[symbolKey])&&require(symbolKey)}catch(error){}module.exports=function(value){if($isWellKnownSymbol&&$isWellKnownSymbol(value))return!0;\ntry{var symbol=thisSymbolValue(value);value=0;for(var keys=getOwnPropertyNames(WellKnownSymbolsStore),keysLength=keys.length;value<keysLength;value++)if(WellKnownSymbolsStore[keys[value]]==symbol)return!0}catch(error$2){}return!1}}","~:source","shadow$provide[\"module$node_modules$core_js_pure$internals$symbol_is_well_known\"] = function(global,require,module,exports) {\n'use strict';\nvar shared = require('../internals/shared');\nvar getBuiltIn = require('../internals/get-built-in');\nvar uncurryThis = require('../internals/function-uncurry-this');\nvar isSymbol = require('../internals/is-symbol');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar Symbol = getBuiltIn('Symbol');\nvar $isWellKnownSymbol = Symbol.isWellKnownSymbol;\nvar getOwnPropertyNames = getBuiltIn('Object', 'getOwnPropertyNames');\nvar thisSymbolValue = uncurryThis(Symbol.prototype.valueOf);\nvar WellKnownSymbolsStore = shared('wks');\n\nfor (var i = 0, symbolKeys = getOwnPropertyNames(Symbol), symbolKeysLength = symbolKeys.length; i < symbolKeysLength; i++) {\n  // some old engines throws on access to some keys like `arguments` or `caller`\n  try {\n    var symbolKey = symbolKeys[i];\n    if (isSymbol(Symbol[symbolKey])) wellKnownSymbol(symbolKey);\n  } catch (error) { /* empty */ }\n}\n\n// `Symbol.isWellKnownSymbol` method\n// https://tc39.es/proposal-symbol-predicates/#sec-symbol-iswellknownsymbol\n// We should patch it for newly added well-known symbols. If it's not required, this module just will not be injected\nmodule.exports = function isWellKnownSymbol(value) {\n  if ($isWellKnownSymbol && $isWellKnownSymbol(value)) return true;\n  try {\n    var symbol = thisSymbolValue(value);\n    for (var j = 0, keys = getOwnPropertyNames(WellKnownSymbolsStore), keysLength = keys.length; j < keysLength; j++) {\n      // eslint-disable-next-line eqeqeq -- polyfilled symbols case\n      if (WellKnownSymbolsStore[keys[j]] == symbol) return true;\n    }\n  } catch (error) { /* empty */ }\n  return false;\n};\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$core_js_pure$internals$function_uncurry_this","~$shadow.js","~$module$node_modules$core_js_pure$internals$well_known_symbol","~$module$node_modules$core_js_pure$internals$is_symbol","~$module$node_modules$core_js_pure$internals$get_built_in","~$module$node_modules$core_js_pure$internals$shared"]],"~:properties",["^5",[]],"~:compiled-at",1705146433965,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$core_js_pure$internals$symbol_is_well_known.js\",\n\"lineCount\":3,\n\"mappings\":\"AAAAA,cAAA,CAAe,+DAAf,CAAoF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAE5H,IAAIC,OAASH,OAAA,CAAQ,mDAAR,CAAb,CACII,WAAaJ,OAAA,CAAQ,yDAAR,CADjB,CAEIK,YAAcL,OAAA,CAAQ,kEAAR,CACdM,OAAAA,CAAWN,OAAA,CAAQ,sDAAR,CACXO,QAAAA,CAAkBP,OAAA,CAAQ,8DAAR,CAElBQ;OAAAA,CAASJ,UAAA,CAAW,QAAX,CACb,KAAIK,mBAAqBD,OAArBC,CAA4BC,iBAAhC,CACIC,oBAAsBP,UAAA,CAAW,QAAX,CAAqB,qBAArB,CAD1B,CAEIQ,gBAAkBP,WAAA,CAAYG,OAAZ,CAAmBK,SAAnB,CAA6BC,OAA7B,CAFtB,CAGIC,sBAAwBZ,MAAA,CAAO,KAAP,CAEnBa,OAAAA,CAAI,CAAGC,WAAAA,CAAaN,mBAAA,CAAoBH,OAApB,CAA7B,KAA0DU,WAA1D,CAA6ED,UAA7E,CAAwFE,MAAxF,CAAgGH,MAAhG,CAAoGE,WAApG,CAAsHF,MAAA,EAAtH,CAEE,GAAI,CACF,IAAII,UAAYH,UAAA,CAAWD,MAAX,CACZV,OAAA,CAASE,OAAA,CAAOY,SAAP,CAAT,CAAJ,EAAiCb,OAAA,CAAgBa,SAAhB,CAF/B,CAGF,MAAOC,KAAP,CAAc,EAMlBpB,MAAA,CAAOC,OAAP,CAAiBoB,QAA0B,CAACC,KAAD,CAAQ,CACjD,GAAId,kBAAJ,EAA0BA,kBAAA,CAAmBc,KAAnB,CAA1B,CAAqD,MAAO,CAAA,CAC5D;GAAI,CACF,IAAIC,OAASZ,eAAA,CAAgBW,KAAhB,CACJE,MAAAA,CAAI,CAAb,KAFE,IAEcC,KAAOf,mBAAA,CAAoBI,qBAApB,CAFrB,CAEiEY,WAAaD,IAAbC,CAAkBR,MAArF,CAA6FM,KAA7F,CAAiGE,UAAjG,CAA6GF,KAAA,EAA7G,CAEE,GAAIV,qBAAA,CAAsBW,IAAA,CAAKD,KAAL,CAAtB,CAAJ,EAAsCD,MAAtC,CAA8C,MAAO,CAAA,CAJrD,CAMF,MAAOH,OAAP,CAAc,EAChB,MAAO,CAAA,CAT0C,CAzByE;\",\n\"sources\":[\"node_modules/core-js-pure/internals/symbol-is-well-known.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$core_js_pure$internals$symbol_is_well_known\\\"] = function(global,require,module,exports) {\\n'use strict';\\nvar shared = require('../internals/shared');\\nvar getBuiltIn = require('../internals/get-built-in');\\nvar uncurryThis = require('../internals/function-uncurry-this');\\nvar isSymbol = require('../internals/is-symbol');\\nvar wellKnownSymbol = require('../internals/well-known-symbol');\\n\\nvar Symbol = getBuiltIn('Symbol');\\nvar $isWellKnownSymbol = Symbol.isWellKnownSymbol;\\nvar getOwnPropertyNames = getBuiltIn('Object', 'getOwnPropertyNames');\\nvar thisSymbolValue = uncurryThis(Symbol.prototype.valueOf);\\nvar WellKnownSymbolsStore = shared('wks');\\n\\nfor (var i = 0, symbolKeys = getOwnPropertyNames(Symbol), symbolKeysLength = symbolKeys.length; i < symbolKeysLength; i++) {\\n  // some old engines throws on access to some keys like `arguments` or `caller`\\n  try {\\n    var symbolKey = symbolKeys[i];\\n    if (isSymbol(Symbol[symbolKey])) wellKnownSymbol(symbolKey);\\n  } catch (error) { /* empty */ }\\n}\\n\\n// `Symbol.isWellKnownSymbol` method\\n// https://tc39.es/proposal-symbol-predicates/#sec-symbol-iswellknownsymbol\\n// We should patch it for newly added well-known symbols. If it's not required, this module just will not be injected\\nmodule.exports = function isWellKnownSymbol(value) {\\n  if ($isWellKnownSymbol && $isWellKnownSymbol(value)) return true;\\n  try {\\n    var symbol = thisSymbolValue(value);\\n    for (var j = 0, keys = getOwnPropertyNames(WellKnownSymbolsStore), keysLength = keys.length; j < keysLength; j++) {\\n      // eslint-disable-next-line eqeqeq -- polyfilled symbols case\\n      if (WellKnownSymbolsStore[keys[j]] == symbol) return true;\\n    }\\n  } catch (error) { /* empty */ }\\n  return false;\\n};\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"shared\",\"getBuiltIn\",\"uncurryThis\",\"isSymbol\",\"wellKnownSymbol\",\"Symbol\",\"$isWellKnownSymbol\",\"isWellKnownSymbol\",\"getOwnPropertyNames\",\"thisSymbolValue\",\"prototype\",\"valueOf\",\"WellKnownSymbolsStore\",\"i\",\"symbolKeys\",\"symbolKeysLength\",\"length\",\"symbolKey\",\"error\",\"module.exports\",\"value\",\"symbol\",\"j\",\"keys\",\"keysLength\"]\n}\n"]